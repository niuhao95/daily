(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{415:function(t,s,a){"use strict";a.r(s);var e=a(54),v=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"浏览器加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器加载"}},[t._v("#")]),t._v(" 浏览器加载")]),t._v(" "),a("p",[t._v("浏览器脚本语言默认是 "),a("code",[t._v("javascript")]),t._v(" "),a("code",[t._v("<sctipt>")]),t._v(" 上 "),a("code",[t._v('type="application/javascript"')]),t._v(" 可以省略, 默认同步加载js脚本, 渲染引擎遇到 "),a("code",[t._v("<sctipt>")]),t._v(" 就会停下来先执行脚本再继续向下渲染, 外部脚本需要加上下载脚本的时间. 脚本下载或执行时间过长就会造成浏览器阻塞, 所有浏览器允许脚本异步加载。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("<path>"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("defer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("<path>"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("async")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("加上 "),a("code",[t._v("defer")]),t._v(" 或 "),a("code",[t._v("async")]),t._v(" 属性, 脚本就会异步加载, 渲染引擎遇到这一行就会开始下载脚本, 但不会等待而是直接执行后续命令。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("defer")]),t._v(" 要等整个页面dom结构完全生成, 其他脚本执行完成才会执行. 多个"),a("code",[t._v("defer")]),t._v("脚本顺序加载。")]),t._v(" "),a("li",[a("code",[t._v("async")]),t._v(" 下载完成就中断渲染执行脚本完成之后再继续渲染. 多个"),a("code",[t._v("async")]),t._v("脚本不能保证加载顺序。")])]),t._v(" "),a("h4",{attrs:{id:"type-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-module"}},[t._v("#")]),t._v(' type="module"')]),t._v(" "),a("p",[t._v("加上 "),a("code",[t._v('type="module"')]),t._v(" 浏览器就认为这是一个es6模块, 等同于加了 "),a("code",[t._v("defer")]),t._v(" 属性, 可以加上 "),a("code",[t._v("async")]),t._v(" 属性行为就会和 "),a("code",[t._v("async")]),t._v(" 脚本一致。")]),t._v(" "),a("ul",[a("li",[t._v("代码运行在模块作用域，内部的顶层变量外部不可见。")]),t._v(" "),a("li",[t._v("自动采用严格模式。")]),t._v(" "),a("li",[t._v("顶层的this关键字返回undefined，而不是指向window。")]),t._v(" "),a("li",[t._v("同一个模块如果加载多次，将只执行一次。")]),t._v(" "),a("li",[t._v("可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL）。\n"),a("ul",[a("li",[t._v("webpack的resolve.extensions可以配置尝试解析哪些后缀名。（vue-cli脚手架不用写后缀的原因）")]),t._v(" "),a("li",[t._v("vite")])])])]),t._v(" "),a("h3",{attrs:{id:"esm-vs-cjs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#esm-vs-cjs"}},[t._v("#")]),t._v(" ESM vs CJS")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CommonJS")]),t._v(" 模块输出的是一个值的拷贝，"),a("code",[t._v("ES6 Module")]),t._v(" 输出的是值的引用。\n"),a("ul",[a("li",[a("code",[t._v("ES6 Module")]),t._v(" import命令在js引擎静态分析到的时候会生成一个“只读引用”，到脚本执行时去模块中取值。")])])]),t._v(" "),a("li",[a("code",[t._v("CommonJS")]),t._v(" 模块是运行时加载， "),a("code",[t._v("ES6 Module")]),t._v(" 是编译时输出接口。")]),t._v(" "),a("li",[a("code",[t._v("CommonJS")]),t._v(" require()是同步加载模块， "),a("code",[t._v("ES6 Module")]),t._v(" import命令是异步加载，有一个独立的模块依赖的解析阶段。")])]),t._v(" "),a("h4",{attrs:{id:"commonjs-模块加载原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块加载原理"}},[t._v("#")]),t._v(" CommonJs 模块加载原理")]),t._v(" "),a("p",[a("code",[t._v("require")]),t._v(" 引用一个 "),a("code",[t._v("cjs")]),t._v(" 的模块时会执行整个脚本生成一个对象。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("{\n  id: '...', // 模块名\n  exports: { ... }, // 模块输出的各个接口\n  loaded: true, // 脚本是否执行完毕\n  ...\n}\n")])])]),a("p",[t._v("取值就是从上述对象的 "),a("code",[t._v("exports")]),t._v(" 取值，多次 "),a("code",[t._v("require")]),t._v(" 脚本只会执行一次也只会返回第一次运行的结果。")]),t._v(" "),a("h4",{attrs:{id:"commonjs-模块的循环加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonjs-模块的循环加载"}},[t._v("#")]),t._v(" CommonJS 模块的循环加载")]),t._v(" "),a("p",[t._v("加载时执行，脚本代码在 "),a("code",[t._v("require")]),t._v(' 的时候，就会全部执行。一旦出现某个模块被"循环加载"，就只输出已经执行的部分，还未执行的部分不会输出。')]),t._v(" "),a("h4",{attrs:{id:"es6-模块的循环加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-模块的循环加载"}},[t._v("#")]),t._v(" ES6 模块的循环加载")]),t._v(" "),a("p",[t._v("动态引用， "),a("code",[t._v("import")]),t._v(" 从一个模块加载变量（如 "),a("code",[t._v("import foo from 'foo'")]),t._v(' ），这些变量不会被缓存，而是成为一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。发生"循环加载"时会认为对应模块已经引入完成不会再执行对应脚本。造成的变量未定义的问题可以使用 '),a("code",[t._v("function")]),t._v(" 或者 "),a("code",[t._v("var")]),t._v(" 的变成提升特性解决。")]),t._v(" "),a("p",[t._v("更多"),a("a",{attrs:{href:"https://wangdoc.com/es6/module-loader.html#%E5%BE%AA%E7%8E%AF%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("循环加载"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=v.exports}}]);