(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{396:function(t,a,s){"use strict";s.r(a);var e=s(54),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"浏览器加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器加载"}},[t._v("#")]),t._v(" 浏览器加载")]),t._v(" "),s("p",[t._v("浏览器脚本语言默认是 "),s("code",[t._v("javascript")]),t._v(" "),s("code",[t._v("<sctipt>")]),t._v(" 上 "),s("code",[t._v('type="application/javascript"')]),t._v(" 可以省略, 默认同步加载js脚本, 渲染引擎遇到 "),s("code",[t._v("<sctipt>")]),t._v(" 就会停下来先执行脚本再继续向下渲染, 外部脚本需要加上下载脚本的时间. 脚本下载或执行时间过长就会造成浏览器阻塞, 所有浏览器允许脚本异步加载。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("<path>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("defer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("<path>"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("async")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("加上 "),s("code",[t._v("defer")]),t._v(" 或 "),s("code",[t._v("async")]),t._v(" 属性, 脚本就会异步加载, 渲染引擎遇到这一行就会开始下载脚本, 但不会等待而是直接执行后续命令。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("defer")]),t._v(" 要等整个页面dom结构完全生成, 其他脚本执行完成才会执行. 多个"),s("code",[t._v("defer")]),t._v("脚本顺序加载。")]),t._v(" "),s("li",[s("code",[t._v("async")]),t._v(" 下载完成就中断渲染执行脚本完成之后再继续渲染. 多个"),s("code",[t._v("async")]),t._v("脚本不能保证加载顺序。")])]),t._v(" "),s("h4",{attrs:{id:"type-module"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type-module"}},[t._v("#")]),t._v(' type="module"')]),t._v(" "),s("p",[t._v("加上 "),s("code",[t._v('type="module"')]),t._v(" 浏览器就认为这是一个es6模块, 等同于加了 "),s("code",[t._v("defer")]),t._v(" 属性, 可以加上 "),s("code",[t._v("async")]),t._v(" 属性行为就会和 "),s("code",[t._v("async")]),t._v(" 脚本一致。")]),t._v(" "),s("ul",[s("li",[t._v("代码运行在模块作用域，内部的顶层变量外部不可见。")]),t._v(" "),s("li",[t._v("自动采用严格模式。")]),t._v(" "),s("li",[t._v("顶层的this关键字返回undefined，而不是指向window。")]),t._v(" "),s("li",[t._v("同一个模块如果加载多次，将只执行一次。")]),t._v(" "),s("li",[t._v("可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL）。\n"),s("ul",[s("li",[t._v("webpack的resolve.extensions可以配置尝试解析哪些后缀名。（vue-cli脚手架不用写后缀的原因）")]),t._v(" "),s("li",[t._v("vite")])])])]),t._v(" "),s("h3",{attrs:{id:"es6-module-vs-commonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-vs-commonjs"}},[t._v("#")]),t._v(" ES6 Module vs CommonJS")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("CommonJS")]),t._v(" 模块输出的是一个值的拷贝，"),s("code",[t._v("ES6 Module")]),t._v(" 输出的是值的引用。\n"),s("ul",[s("li",[s("code",[t._v("ES6 Module")]),t._v(" import命令在js引擎静态分析到的时候会生成一个“只读引用”，到脚本执行时去模块中取值。")])])]),t._v(" "),s("li",[s("code",[t._v("CommonJS")]),t._v(" 模块是运行时加载， "),s("code",[t._v("ES6 Module")]),t._v(" 是编译时输出接口。")]),t._v(" "),s("li",[s("code",[t._v("CommonJS")]),t._v(" require()是同步加载模块， "),s("code",[t._v("ES6 Module")]),t._v(" import命令是异步加载，有一个独立的模块依赖的解析阶段。")])]),t._v(" "),s("h4",{attrs:{id:"循环加载-todo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环加载-todo"}},[t._v("#")]),t._v(" 循环加载 "),s("a",{attrs:{href:"https://wangdoc.com/es6/module-loader.html#%E5%BE%AA%E7%8E%AF%E5%8A%A0%E8%BD%BD",target:"_blank",rel:"noopener noreferrer"}},[t._v("todo"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);